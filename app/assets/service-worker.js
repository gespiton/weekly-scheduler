// Set this to true for production
var doCache = true;
var db;

// Name our cache
const CACHE_NAME = 'my-pwa-cache-v1';
const DB_NAME = 'weekly-db';

// Delete old caches that are not our current one!
self.addEventListener("activate", event => {
  const cacheWhitelist = [CACHE_NAME];
  event.waitUntil(
    caches.keys()
      .then(keyList =>
        Promise
          .all(keyList.map(key => {
            if (!cacheWhitelist.includes(key)) {
              console.log('Deleting cache: ' + key);
              return caches.delete(key);
            }
          }))
          .then(() => {
            console.log('activated');
          })
      )
  );

  createDb();

});

function createDb() {
  const request = indexedDB.open(DB_NAME, 2);

  request.onerror = function (event) {
    console.error("db error, ", event);
  };

  request.onsuccess = function (event) {
    console.log("db request success");
    db = event.target.result;

    db.onerror = function (event) {
      alert("Database error: " + event.target.errorCode);
    };
  };


  request.onupgradeneeded = function (event) {
    console.log('on upgrade');
    const db = event.target.result;

    const objectStore = db.createObjectStore("schedules", {keyPath: "name"});

    objectStore.createIndex("name", "name", {unique: false});

    objectStore.transaction.oncomplete = function () {
      // const customerObjectStore = db.transaction("schedules", "readwrite").objectStore("schedules");
      // customerObjectStore.add({name: 'haha', ssn: 'ssn'});
    };
  };
}

// The first time the user starts up the PWA, 'install' is triggered.
self.addEventListener('install', function (event) {
  self.skipWaiting();
  if (doCache) {
    event.waitUntil(
      caches.open(CACHE_NAME)
        .then(
          cache => {
            cache.addAll(['/']);
          }
          // function (cache) {
          //   // Get the assets manifest so we can see what our js file is named
          //   // This is because webpack hashes it
          //   fetch("asset-manifest.json")
          //     .then(response => {
          //       return response.json()
          //     })
          //     .then(assets => {
          //       // Open a cache and cache our files
          //       // We want to cache the page and the main.js generated by webpack
          //       // We could also cache any static assets like CSS or images
          //       const urlsToCache = [
          //         "/",
          //         assets["bundle.js"]
          //       ];
          //       cache.addAll(urlsToCache);
          //       console.log('cached');
          //     })
          // }
        )
    );
  }
});

// When the webpage goes to fetch files, we intercept that request and serve up the matching files
// if we have them
self.addEventListener('fetch', function (event) {
  if (doCache) {
    event.respondWith(
      caches.match(event.request)
        .then(function (response) {
          return response || caches.open(CACHE_NAME)
            .then(cache => {
              // return cache.add(event.request.url);
              return fetch(event.request)
                .then(response => {
                  if (event.request.method === 'GET')
                    cache.put(event.request, response.clone());
                  return response;
                });
            })
        })
    );
  }
});

